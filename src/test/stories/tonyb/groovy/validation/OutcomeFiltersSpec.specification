package tonyb.groovy.validation

import static Outcome.*

outcomes = [Outcome.information("Information"),
            Outcome.serious("Serious"),
            Outcome.warning("Warning"),
            Outcome.processingError("Broken")
            ]

it "is possible to get a sorted list of outcomes",{
    use(OutcomeHelper) {
        outcomes.sort()[0].shouldBe Outcome.information("Information")
        outcomes.sort()[1].shouldBe Outcome.warning("Warning")
        outcomes.sort()[2].shouldBe Outcome.serious("Serious")
        outcomes.sort()[3].shouldBe Outcome.processingError("Broken")
    }
}

it "is possible to get a filtered list of informational outcomes",{
    use(OutcomeHelper) {
        outcomes.onlyInformation().size.shouldBe 1
        outcomes.onlyInformation().shouldHave Outcome.information("Information")
    }
}
it "is possible to get a filtered list of warning outcomes",{
    use(OutcomeHelper) {
        outcomes.onlyWarnings().size.shouldBe 1
        outcomes.onlyWarnings().shouldHave Outcome.warning("Warning")
    }
}
it "is possible to get a filtered list of serious outcomes",{
    use(OutcomeHelper) {
        outcomes.onlySerious().size.shouldBe 1
        outcomes.onlySerious().shouldHave Outcome.serious("Serious")
    }
}
it "is possible to get a filtered list of processing errors",{
    use(OutcomeHelper) {
        outcomes.onlyProcessingErrors().size.shouldBe 1
        outcomes.onlyProcessingErrors().shouldHave Outcome.processingError("Broken")
    }
}
it "is possible to get a filtered list of everything except processing errors",{
    use(OutcomeHelper) {
        outcomes.ignoringProcessingErrors().size.shouldBe 3
        outcomes.ignoringProcessingErrors().shouldNotHave Outcome.processingError("Broken")
    }
}
it "is possible to get a filtered list of everything less than serious",{
    use(OutcomeHelper) {
        outcomes.lessThanSerious().size.shouldBe 2
        outcomes.lessThanSerious().shouldNotHave Outcome.processingError("Broken")
        outcomes.lessThanSerious().shouldNotHave Outcome.serious("Serious")
    }
}
it "is possible to get a filtered list of everything more than information",{
    use(OutcomeHelper) {
        outcomes.moreThanInformation().size.shouldBe 3
        outcomes.moreThanInformation().shouldNotHave Outcome.information("Information")
    }
}
it "is possible to compose filters",{
    use(OutcomeHelper) {
        outcomes.ignoringProcessingErrors().lessThanSerious().moreThanInformation().size.shouldBe 1
        outcomes.ignoringProcessingErrors().lessThanSerious().moreThanInformation().shouldHave Outcome.warning("Warning")
    }
}
