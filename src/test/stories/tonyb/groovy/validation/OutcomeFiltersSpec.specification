package tonyb.groovy.validation

import static Outcome.*

outcomes = [Outcome.information("Information"),
            Outcome.serious("Serious"),
            Outcome.warning("Warning"),
            Outcome.processingError("Broken")
            ]
outcomes.metaClass.mixin(OutcomeHelper)

it "is possible to get a sorted list of outcomes",{
    outcomes.sorted[0].shouldBe Outcome.information("Information")
    outcomes.sorted[1].shouldBe Outcome.warning("Warning")
    outcomes.sorted[2].shouldBe Outcome.serious("Serious")
    outcomes.sorted[3].shouldBe Outcome.processingError("Broken")
}

it "is possible to get a filtered list of informational outcomes",{
    outcomes.onlyInformation.size.shouldBe 1
    outcomes.onlyInformation.shouldHave Outcome.information("Information")
}
it "is possible to get a filtered list of warning outcomes",{
    outcomes.onlyWarnings.size.shouldBe 1
    outcomes.onlyWarnings.shouldHave Outcome.warning("Warning")
}
it "is possible to get a filtered list of serious outcomes",{
    outcomes.onlySerious.size.shouldBe 1
    outcomes.onlySerious.shouldHave Outcome.serious("Serious")
}
it "is possible to get a filtered list of processing errors",{
    outcomes.onlyProcessingErrors.size.shouldBe 1
    outcomes.onlyProcessingErrors.shouldHave Outcome.processingError("Broken")
}
it "is possible to get a filtered list of everything except processing errors",{
    outcomes.ignoringProcessingErrors.size.shouldBe 3
    outcomes.ignoringProcessingErrors.shouldNotHave Outcome.processingError("Broken")
}
it "is possible to get a filtered list of everything less than serious",{
    outcomes.lessThanSerious.size.shouldBe 2
    outcomes.lessThanSerious.shouldNotHave Outcome.processingError("Broken")
    outcomes.lessThanSerious.shouldNotHave Outcome.serious("Serious")
}
it "is possible to get a filtered list of everything more than information",{
    outcomes.moreThanInformation.size.shouldBe 3
    outcomes.moreThanInformation.shouldNotHave Outcome.information("Information")
}
it "is possible to compose filters",{
    outcomes.ignoringProcessingErrors.lessThanSerious.moreThanInformation.size.shouldBe 1
    outcomes.ignoringProcessingErrors.lessThanSerious.moreThanInformation.shouldHave Outcome.warning("Warning")
}