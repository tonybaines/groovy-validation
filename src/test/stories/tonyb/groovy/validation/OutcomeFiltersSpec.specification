package tonyb.groovy.validation

import static Outcome.*

outcomes = [Outcome.trivial("Trivial"),
            Outcome.serious("Serious"),
            Outcome.warning("Warning"),
            Outcome.processingError("Broken")
            ]


it "is possible to get a sorted list of outcomes",{
    sort(outcomes)[0].shouldBe Outcome.trivial("Trivial")
    sort(outcomes)[1].shouldBe Outcome.warning("Warning")
    sort(outcomes)[2].shouldBe Outcome.serious("Serious")
    sort(outcomes)[3].shouldBe Outcome.processingError("Broken")
}

it "is possible to get a filtered list of warning outcomes",{
    warnings(outcomes).size.shouldBe 1
    warnings(outcomes).shouldHave Outcome.warning("Warning")
}
it "is possible to get a filtered list of serious outcomes",{
    seriousThings(outcomes).size.shouldBe 1
    seriousThings(outcomes).shouldHave Outcome.serious("Serious")
}
it "is possible to get a filtered list of processing errors",{
    processingErrors(outcomes).size.shouldBe 1
    processingErrors(outcomes).shouldHave Outcome.processingError("Broken")
}
it "is possible to get a filtered list of everything except processing errors",{
    ignoringProcessingErrors(outcomes).size.shouldBe 3
    ignoringProcessingErrors(outcomes).shouldNotHave Outcome.processingError("Broken")
}
it "is possible to get a filtered list of everything less than serious",{
    lessThanSerious(outcomes).size.shouldBe 2
    lessThanSerious(outcomes).shouldNotHave Outcome.processingError("Broken")
    lessThanSerious(outcomes).shouldNotHave Outcome.serious("Serious")
}
it "is possible to get a filtered list of everything more than trivial",{
    moreThanTrivial(outcomes).size.shouldBe 3
    moreThanTrivial(outcomes).shouldNotHave Outcome.trivial("Trivial")
}
it "is possible to compose filters",{
    ignoringProcessingErrors(lessThanSerious(moreThanTrivial(outcomes))).size.shouldBe 1
    ignoringProcessingErrors(lessThanSerious(moreThanTrivial(outcomes))).shouldHave Outcome.warning("Warning")
}